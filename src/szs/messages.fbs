
namespace szs.messages;

union Message {
  Request,
  Response,
}

table Packet {
  message: Message;
}

union RequestParams {
  OpenArchiveRequest,
  InStreamReadRequest,
  InStreamSeekRequest,
  ArchiveGetItemCountRequest,
  ArchiveCloseRequest,
}

table Request {
  method: string;
  params: RequestParams;
  id: int;
}
union ResponseResult {
  OpenArchiveResponse,
  InStreamReadResponse,
  InStreamSeekResponse,
  ArchiveGetItemCountResponse,
  ArchiveCloseResponse,
}

table Response {
  result: ResponseResult;
  error: Error;
  id: int;
}

table OpenArchiveRequest {
  in_stream_id: int;
  size: uint;
  ext: string;
}

table OpenArchiveResponse {
  archive_id: int;
}

table InStreamReadRequest {
  in_stream_id: int;
  size: uint;
}

table InStreamReadResponse {
  ext: string;
  data: [byte];
  processed_size: uint;
}

// aligned with fseek() values
enum Whence:int {
  SET = 0,
  CUR = 1,
  END = 2,
}

table InStreamSeekRequest {
  in_stream_id: int;
  offset: int;
  whence: Whence;
}

table InStreamSeekResponse {
  new_position: int;
}

table ArchiveGetItemCountRequest {
  archive_id: int;
}

table ArchiveGetItemCountResponse {
  num_items: int;
}

table ArchiveCloseRequest {
  archive_id: int;
}

table ArchiveCloseResponse {}

table Error {
  code: int;
  message: string;
}

root_type Packet;
